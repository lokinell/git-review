#!/bin/bash

this=$(basename "$0")

this_script_dir="$(dirname "$0")"

# colors
RED="\033[0;31m"
YELLOW="\033[1;33m"
GREEN="\033[0;32m"
NO_COLOR="\033[0m"
BOLD="\033[1m"
UNDERLINE="\033[4m"

die() { echo -e "${RED}${@}${NO_COLOR}"; exit 1; }
warn() { echo -e "${YELLOW}${@}${NO_COLOR}"; }
good() { echo -e "${GREEN}${@}${NO_COLOR}"; }
run(){ echo -e "${GREEN}${*}${NO_COLOR}"; "$@"; }

[[ -c /dev/fd/1 ]] && THIS_LESS="less -SRFX" || THIS_LESS="cat"


GIT=$(which git)
if [[ -z "$GIT" ]]; then
    die "git is not installed"
fi

SSH=$(which ssh)
if [[ -z "$SSH" ]]; then
    die "ssh is not installed"
fi

CURL=$(which curl)
if [[ -z "$CURL" ]]; then
    die "curl is not installed"
fi

GIT_DIR=$($GIT rev-parse --git-dir 2>/dev/null)
if [[ -z "$GIT_DIR" ]]; then
    die "$this can only be run from a git repository."
fi


CURRENT=$($GIT symbolic-ref -q HEAD || $GIT rev-parse HEAD)
CURRENT=${CURRENT#refs/heads/}

REMOTE="origin" # 暂时固定为origin

username="$($GIT config gerrit.username)"
http_password="$($GIT config gerrit.httppassword)"
http_host="$($GIT config gerrit.httphost)"
ssh_host="$($GIT config gerrit.sshhost)"

rest_url="http://${http_host%/}"

rest(){ curl -s --digest -H "Accept: application/json" -u "$username:$http_password" "$@" | sed "1{ /)]}'/d }"; }
get(){ rest -X GET "$@"; }
put(){ rest -X PUT "$@"; }
post(){ rest -X POST "$@"; }
delete(){ rest -X DELETE "$@"; }
getJsonValue(){ cat - | python -c "import json,sys; _=json.load(sys.stdin); print ${1}"; }
gerrit(){ ssh -p "${ssh_host#*:}" "$username@${ssh_host%:*}" gerrit "$@"; }
no_changes () {
    # $GIT diff-index --quiet --cached HEAD -- &&
    #     $GIT diff-files --quiet
    $GIT update-index --refresh --unmerged -q >/dev/null
    $GIT diff-index --quiet --cached HEAD -- &&
        $GIT diff-files --quiet
}

is_integer() {
    [[ "$1" = [0-9]* ]] > /dev/null 2>&1
    return $?
}

has_remote_branch() {
    local remote=$1 branch=$2
    $GIT branch -r | grep "$remote/$branch" > /dev/null
    return $?
}
ask_yes_no() {
    if [ "" = "$2" ] ; then
        local msg="$1 [y/n]: "
    else
        local msg="$1 (y/n) [$2]: "
    fi
    while true; do
        read -p "$msg" choice
            case ${choice:-$2} in
                y|Y|yes|Yes|YES)
                    return 0
                    ;;
                n|no|No|NO)
                    return 1
                    ;;
                *)
                    warn "Please choose either y or n"
                    ;;
            esac
    done
}


selfinfo(){
    get "$rest_url/a/accounts/self"
}

# $1 ==> changd_id(output)
# $2 ==> patch_set(output)
__guess_change_number(){

    local __tmp_change_id
    local __tmp_change_patch_set
    unset "$1"

    local __current=$($GIT symbolic-ref -q HEAD || $GIT rev-parse HEAD)
    __current=${__current#refs/heads/}

    if [[ "$__current" =~ ^changes/[0-9]+/[0-9]+$ ]]; then
        IFS='/' read -r __tmp_change_id __tmp_change_patch_set <<< "${__current#changes/}"
    else
        __get_change "$($GIT rev-parse HEAD)"
        __tmp_change_id="$this_number"
        __tmp_change_patch_set="$this_currentPatchSet_number"
        [[ "$this_owner_username" != "$username" ]] && die "HEAD所指向的commit对应的change所属owner($this_owner_username)不为$username"
    fi
    [[ "$__tmp_change_id" =~ ^[0-9]+$ ]] && eval "$1=$__tmp_change_id"
    [[ -n "$2" ]] && [[ "$__tmp_change_patch_set" =~ ^[0-9]+$ ]] && eval "$2=$__tmp_change_patch_set"
}

# $1 ==> changeId or number or commitSha1Hash
__get_change(){
    unset this_id this_number this_project this_branch this_url this_owner_username this_owner_email this_currentPatchSet_number this_currentPatchSet_revision this_currentPatchSet_ref
    IFS='|' read -r this_id this_number this_project this_branch this_url this_owner_username this_owner_email this_currentPatchSet_number this_currentPatchSet_revision this_currentPatchSet_ref <<< "$(gerrit query --format=json --current-patch-set "$@" | sed -ne '1p;q' | getJsonValue "None if _ is None else '|'.join([ x if x is not None else 'None' for x in [ _.get('id'), _.get('number'), _.get('project'), _.get('branch'), _.get('url'), None if _.get('owner') is None else _.get('owner').get('username'), None if _.get('owner') is None else _.get('owner').get('email'), None if _.get('currentPatchSet') is None else _.get('currentPatchSet').get('number'), None if _.get('currentPatchSet') is None else  _.get('currentPatchSet').get('revision'), None if _.get('currentPatchSet') is None else _.get('currentPatchSet').get('ref')]])")"

    [[ "$this_number" == "None" ]] && warn "获取change: $1, 相关信息失败"
}

__list(){
     # get "$rest_url/a/changes/?q=is:open+reviewer:self"
     python - "$(get "$rest_url/a/changes/?q=is:open+reviewer:self&q=is:open+owner:self")" <<'EOF'
# -*- encoding:utf-8 -*-
import json,sys
_=json.loads(sys.argv[1])

all_change_numbers=[]

def print_change(change):
    if change['_number'] in all_change_numbers:
        return
    else:
        all_change_numbers.append(change['_number'])
    print '-----+------------+--------------+---------------------+-----------------------------------------'
    print "%4s | %-10s | %-12s | %-18s | %-s" % (change['_number'], change['owner']['name'], change['project'], change['updated'][0:19], change['subject'].split('\n')[0][0:60])

if len(_) > 0:
    print '================================================================================================='
    print ' id  | owner      | project      | update              | subject'
    for change in _:
        if isinstance(change, list):
            for __i in change:
                print_change(__i)
        else:
            print_change(change)
    print '================================================================================================='
else:
    print "no changes to you."
EOF
}

#get "$rest_url/a/changes/?q=492"

# 发起review
__push(){
    local __remote="$REMOTE"
    local __local_ref
    local __remote_branch

    PUSH_ARGS="$(getopt -o 'r:h' --long help,reviewer -- "$@")"
    [[ $? != "0" ]] && { echo "argument error."; return 1; };
    eval set -- "$PUSH_ARGS"
    while :; do
        case "${1}" in
            -r|--reviewer) IFS=',' read -a reviewer <<< "$2"; shift 2;;
            -h|--help) return ;;
            --) shift; break ;;
            *) echo "unknow options"; return 1 ;;
        esac
    done

    [[ $# -gt 0 ]] && __remote="$1"

    [[ $# -gt 1 ]] && {
        IFS=':' read -r __local_ref __remote_branch <<<"$2"
    }

    [[ -z "$__remote_branch" ]] && {
        upstream="$($GIT for-each-ref --format='%(upstream)' "refs/heads/$CURRENT")"
        [[ -n "$upstream" ]] && __remote_branch="${upstream#refs/remotes/*/}"
    }

    [[ -z "$__local_ref" ]] && __local_ref=HEAD

    [[ -z "$($GIT ls-remote "$REMOTE" "$__remote_branch")" ]] && die "remote $REMOTE not found branch: $__remote_branch"
    if [[ ${#reviewer[@]} -eq 0 ]]; then
        run $GIT push "$REMOTE" "$__local_ref:refs/for/$__remote_branch"
    else
        local __i
        local reviewer_params
        for __i in "${reviewer[@]}"; do
            if echo "$__i" | grep -q "@"; then
                reviewer_params="$reviewer_params,r=$__i";
            else
                reviewer_params="$reviewer_params,r=$__i@ucweb.com";
            fi
        done
        reviewer_params="${reviewer_params#,}"
        run $GIT push "$REMOTE" "$__local_ref:refs/for/$__remote_branch%$reviewer_params"
    fi
}


#get "$rest_url/a/changes/492/revisions/current/patch" | base64 -d

# 把change应用到本地.
# $1 ==> changeId or number or commitSha1Hash
__pull(){
    local __local_change_id="$1"
    local __local_change_patch_set
    [[ -z "$__local_change_id" ]] && __guess_change_number __local_change_id __local_change_patch_set
    __get_change "$__local_change_id"

    remote_ref="$this_currentPatchSet_ref"

    [[ ! "$remote_ref" == refs/* ]] && die "获取$@ 的patch失败."
    local_ref="changes/${remote_ref#refs/changes/*/}"

    [[ -n "$($GIT rev-parse "$local_ref")" ]] && run $GIT branch -D "$local_ref"
    run $GIT fetch "$REMOTE" "$remote_ref" && run $GIT checkout -b "$local_ref" FETCH_HEAD
}

# $1 ==> changeId or number or commitSha1Hash
__fetch(){
    local __local_change_id="$1"
    local __local_change_patch_set
    [[ -z "$__local_change_id" ]] && __guess_change_number __local_change_id __local_change_patch_set

    __get_change "$__local_change_id"

    if ! is_integer $this_number; then
        die "获取change失败: $1"
    fi

    remote_ref="${this_currentPatchSet_ref}"

    "$GIT" ls-remote "${REMOTE}" | grep "${remote_ref%/*}" | awk '{print $2;}' | while read REF
    do
            run git fetch "${REMOTE}" "${REF}"
            run git branch "changes/${REF#refs/changes/*/}" FETCH_HEAD
    done
}

__code_review() {


    local REVIEW_ARGS="$(getopt -o ':c:v:m' --long code-review,verified,message -- "$@")"
    local CODE_REVIEW
    local VERIFIED
    local MESSAGE

    [[ $? != "0" ]] && { echo "argument error."; return 1; };

    eval set -- "$REVIEW_ARGS"


    while :; do
        case "${1}" in
            -c|--code-review) CODE_REVIEW="$2"; shift 2 ;;
            -v|--verified) VERIFIED="$2" ; shift 2 ;;
            -m|--message) MESSAGE="$2" ; shift 2 ;;
            --) shift; break ;;
            *) echo "unknow options"; exit 1 ;;
        esac
    done

    local __local_change_id="$1"
    local __local_change_patch_set
    [[ -z "$__local_change_id" ]] && __guess_change_number __local_change_id __local_change_patch_set
    __get_change "$__local_change_id"
    if ! is_integer $this_number; then
        die "获取change失败: $1"
    fi
    change_project="$this_project"
    change_patch_set="$this_currentPatchSet_number"
    change="$this_number"


    local CMD=("review")
    if [[ -c /dev/fd/1 ]]; then
        local zero="0"

        read -e -p "Verified (-1..+1) [0] : " VERIFIED
        read -e -p "Code review (-2..+2) [0] : " CODE_REVIEW

        echo "You may supply a message. Hit return once your are done."
        read -e -p "Message: " MESSAGE
    fi

    CODE_REVIEW="${CODE_REVIEW:-$zero}"
    [[ -n "$VERIFIED" ]] && CMD+=("--verified=$VERIFIED")
    CMD+=("--code-review=$CODE_REVIEW")
    CMD+=("--project=$change_project" "$change,$change_patch_set")
    if [[ -n $MESSAGE ]]; then
        CMD+=("--message=\"$MESSAGE\"")
    fi
    run gerrit "${CMD[@]}"
}

__submit(){

    local __local_change_id="$1"
    local __local_change_patch_set
    [[ -z "$__local_change_id" ]] && __guess_change_number __local_change_id __local_change_patch_set
    __get_change "$__local_change_id"

    if ! is_integer $this_number; then
        die "获取change失败: $1"
    fi

    echo "You may supply a message. Hit return once your are done."
    read -e -p "Message: " MESSAGE

    local CMD=("review")
    CMD+=("--submit")
    CMD+=("--project=$this_project" "$this_number,$this_currentPatchSet_number")
    if [[ -n $MESSAGE ]]; then
        CMD+=("--message=\"$MESSAGE\"")
    fi

    run gerrit "${CMD[@]}"
}
__abandon() {
    local __local_change_id="$1"
    local __local_change_patch_set
    [[ -z "$__local_change_id" ]] && __guess_change_number __local_change_id __local_change_patch_set
    __get_change "$__local_change_id"

    if ! is_integer $this_number; then
        die "获取change失败: $1"
    fi

    echo "You may supply a message. Hit return once your are done."
    read -e -p "Message: " MESSAGE

    local CMD=("review")
    CMD+=("--abandon")
    CMD+=("--project=$this_project" "$this_number,$this_currentPatchSet_number")
    if [[ -n $MESSAGE ]]; then
        CMD+=("--message=\"$MESSAGE\"")
    fi

    run gerrit "${CMD[@]}"
}

__restore() {
    local __local_change_id="$1"
    local __local_change_patch_set
    [[ -z "$__local_change_id" ]] && __guess_change_number __local_change_id __local_change_patch_set
    __get_change "$__local_change_id"

    if ! is_integer $this_number; then
        die "获取change失败: $1"
    fi

    echo "You may supply a message. Hit return once your are done."
    read -e -p "Message: " MESSAGE

    local CMD=("review")
    CMD+=("--restore")
    CMD+=("--project=$this_project" "$this_number,$this_currentPatchSet_number")
    if [[ -n $MESSAGE ]]; then
        CMD+=("--message=\"$MESSAGE\"")
    fi

    run gerrit "${CMD[@]}"
}

__show(){
    local __local_change_id="$1"
    local __local_change_patch_set
    [[ -z "$__local_change_id" ]] && __guess_change_number __local_change_id __local_change_patch_set
    __get_change "$__local_change_id"

    if ! is_integer $this_number; then
        die "获取change失败: $1"
    fi
    run gerrit "query" \
        "--current-patch-set" \
        "--all-approvals" \
        "--patch-sets" \
        "--files" \
        "--comments" \
        "--commit-message" \
        "--all-reviewers" \
        "change:'$this_number'" \
        "project:${this_project}"
}

__open(){

    local __local_change_id="$1"
    local __local_change_patch_set
    [[ -z "$__local_change_id" ]] && __guess_change_number __local_change_id __local_change_patch_set
    __get_change "$__local_change_id"

    if ! is_integer $this_number; then
        die "获取change失败: $1"
    fi
    run x-www-browser "$this_url"
}

__comment(){
    local __local_change_id="$1"
    local __local_change_patch_set
    local __local_line_count=0
    [[ -z "$__local_change_id" ]] && __guess_change_number __local_change_id __local_change_patch_set
    __get_change "$__local_change_id"

    change_project="$this_project"
    change_patch_set="$this_currentPatchSet_number"
    change="$this_number"

    local line_count=0
    local comment_count=0

    while IFS=':' read -r _path _line _msg; do
        (( line_count++ ))
        if [[ "$_line" =~ ^[0-9]+$ ]];then
            if [[ -n "$(put -H "Content-Type: application/json;charset=UTF-8" -d "{ \"path\": \"$_path\", \"line\": $_line, \"message\": \"$_msg\" }" \
                "$rest_url/a/changes/$this_number/revisions/$this_currentPatchSet_number/drafts" | getJsonValue '_.get("id")')" ]]; then
                good "$ $_path:$_line:$_msg"
                (( comment_count++ ))
            fi
        else
            warn "> $_path:$_line:$_msg"
        fi
    done
    [[ $line_count -gt 0 ]] && {
        if [[ $comment_count -gt 0 ]]; then
            run gerrit "review" "--code-review=0" "--project=$change_project" "$change,$change_patch_set" "--message=\"稍微review了一下, 添加了几个注释.\""
        else
            run gerrit "review" "--code-review=1" "--project=$change_project" "$change,$change_patch_set" "--message=\"very good!!!\""
        fi
    }
}


usage(){
cat <<EOF
$this config                                        # 配置当前仓库的gerrit相关信息.
$this selfinfo                                      # 获取当前用户的gerrit用户基本信息.
$this list                                          # 列出本人或本人要review的changes
$this show <change number>                          # 显示某个change的详细信息
$this pull <change number>                          # 把某个change fetch到本地,并checkout到该分支
$this fetch <change number>                         # 把某个change fetch到本地
$this push [remote] [[ref]:branch] [-r r1,r2...]    # 发起review, 默认会添加上所修改文件的owner
$this review <change number>                        # Verify, approve and/or submit one or more patch sets
$this submit <change number>                        # submit
$this abandon <change number>                       # abandon
$this restore <change number>                       # 重新开启abandon的change
$this open <change number>                          # 浏览器浏览该change
$this set-reviewer <change number>                  # 添加或删除reviewer(TODO)
$this ban-commit                                    # 锁定, 禁止提交(TODO)

HEAD为'refs/heads/changes/change_numer/patch_set_numer'形式的分支可以不提供<change number>, 会自动获取. 若为其他分支需要提供<change number>

EOF
}


__config(){
    local USERNAME HTTP_PASSWORD SSH_HOST HTTP_HOST PROJECT

    while true; do
        read -e -p "username(登入gerrit的用户名): "  USERNAME
        [[ -n "$USERNAME" ]] && break
    done

    read -e -p "ssh host:port [不填先就默认为 gerritu4.ucweb.local:29418]: " SSH_HOST
    [[ -z "$SSH_HOST" ]] && SSH_HOST="gerritu4.ucweb.local:29418"
    read -e -p "http host:port [不填先就默认为 gerritu4.ucweb.local:8080]: " HTTP_HOST
    [[ -z "$HTTP_HOST" ]] && HTTP_HOST="gerritu4.ucweb.local:8080"

    echo "浏览器登录gerrit页面 -> 页面右上角,用户名下拉 -> 设置 ->"
    echo "http password -> 若没有PASSWORD就点击generate password."
    while true; do
        read -e -p "http password: " HTTP_PASSWORD
        [[ -n "$HTTP_PASSWORD" ]] && break
    done

    git config gerrit.username "$USERNAME"
    git config gerrit.httppassword "$HTTP_PASSWORD"
    git config gerrit.httphost "$HTTP_HOST"
    git config gerrit.sshhost "$SSH_HOST"

    echo "username=$(git config gerrit.username)"
    echo "http_password=$(git config gerrit.httppassword)"
    echo "http_host=$(git config gerrit.httphost)"
    echo "ssh_host=$(git config gerrit.sshhost)"
}

__check_config(){
    if [[ -z "$username" ]] || [[ -z "$http_password" ]] || [[ -z "$http_host" ]] || [[ -z "$ssh_host" ]];then

        remote_url="$($GIT config remote.${REMOTE}.url)"
        [[ -z "$remote_url" ]] && die "git config remote.${REMOTE}.url 获取到的远程地址为空."

        remote_url=${url_line# *URL: }
        remote_url="${remote_url#*://}"
        remote_url="${remote_url%%/*}"
        [[ "$remote_url" == *@* ]] && {
            username="${remote_url%%@*}"
            remote_url="${remote_url#*@}"
        }

        [[ "$remote_url" == *:* ]] && {
            port="${remote_url##*:}"
            remote_url="${remote_url%:*}"
        }
        die "当前仓库没有配置gerrit. 请执行: $this review config"
    fi
}

__self_info(){
    get "$rest_url/a/accounts/self"
    gerrit version
}


[[ $# -eq 0 ]] && { usage; exit 0; }

[[ ! "$1" =~ ^(config|help)$ ]] && __check_config

case "${1}" in
    config)
        __config "${@:2}"
        ;;
    selfinfo)
        __self_info "${@:2}"
        ;;
    list)
        __list "${@:2}"
        ;;
    show)
        __show "${@:2}" | $THIS_LESS
        ;;
    pull)
        __pull "${@:2}"
        ;;
    fetch)
        __fetch "${@:2}"
        ;;
    push)
        __push "${@:2}"
        ;;
    review)
        __code_review "${@:2}"
        ;;
    submit)
        __submit "${@:2}"
        ;;
    abandon)
        __abandon "${@:2}"
        ;;
    restore)
        __restore "${@:2}"
        ;;
    open)
        __open "${@:2}"
        ;;
    set-reviewer)
        :
        ;;
    ban-commit)
        :
        ;;
    comment)
        __comment "${@:2}"
        ;;
    help)
        usage; exit 0
        ;;
    *)
        usage
        die "unknown command: $1"
        ;;
esac

